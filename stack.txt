#include <stdio.h>
#include<stdlib.h>
#include<limits.h>

struct stack{
    int top;
    int *arr;
    int capacity;
};

struct stack* createStack(int capacity){
    struct stack *S = (struct stack*)malloc(sizeof(struct stack));
    if(!S)
        return NULL;
    S->top = -1;
    S->arr = malloc(sizeof(capacity*sizeof(int)));
    S->capacity = capacity;
    if(!S->arr)
        return NULL;
    return S;
}

int isEmpty(struct stack *s){
    return s->top==-1;
}

int isFull(struct stack *s){
    return s->top==s->capacity-1;
}

void doubleStack(struct stack *s){
    s->capacity *= 2;
    s->arr = realloc(s->arr,s->capacity*sizeof(int));
}

int push(struct stack* s){
    if(isFull(s))
        doubleStack(s);
    printf("Enter the element: ");
    scanf("%d",&s->arr[++s->top]);
}

int peek(struct stack* s){
    if(isEmpty(s))
    printf("Stack is empty");
    else
    printf("%d",s->arr[s->top]);
}

int pop(struct stack* s){
    if(isEmpty(s))
    printf("Stack is empty");
    else{
        return s->arr[s->top--];
    }
}

int deleteStack(struct stack* s){
    if(s){
        if(s->arr)
        free(s->arr);
        free(s);
    }
}

int main(){
    int capacity;
    printf("Enter the capacity of Stack :");
    scanf("%d",&capacity);
    struct stack *stk = createStack(capacity);
    for(int i =0;i<capacity;i++){
    push(stk);
    }
    
    push(stk);
    peek(stk);
    for(int i =0;i<capacity;i++){
    pop(stk);
    }    
    peek(stk);
    deleteStack(stk);
    return 0;
}